# Friction is important as it affects how the robot interacts with different surfaces (indoor, outdoor).
friction_range = [0.5, 5.0]  # Moderate range to cover various surfaces like tiles, grass, dirt, etc.

# Restitution affects how the robot bounces off surfaces or objects; however, for a running task, this might be less critical.
restitution_range = [0.0, 0.5]  # Lower range as we're not focusing on bouncing, but it's still relevant for minor impacts.

# Added mass simulates the effect of carrying additional weight, which could influence stability and motor strength requirements.
added_mass_range = [-2.0, 2.0]  # A moderate range to simulate carrying light payloads or none.

# Center of mass displacement affects stability and maneuverability.
com_displacement_range = [-0.05, 0.05]  # Slight displacements to ensure the model can handle minor imbalances.

# Motor strength directly affects the robot's ability to move and respond to commands.
motor_strength_range = [0.75, 1.75]  # A moderate range allowing for variability in motor performance.

# Kp_factor (proportional gain) and Kd_factor (derivative gain) influence the control loop's responsiveness and stability.
Kp_factor_range = [0.75, 1.5]  # A range that allows for experimenting with control responsiveness without becoming unstable.
Kd_factor_range = [0.75, 1.5]  # Similar to Kp to ensure controllability under various conditions.

# Degrees of freedom (DOF) stiffness and damping affect how rigid and shock-absorbing the joints are, respectively.
dof_stiffness_range = [0.2, 0.8]  # A range that allows for some variation in joint stiffness without being too rigid or floppy.
dof_damping_range = [0.1, 0.4]  # Provides variability in how the robot absorbs shocks and returns to equilibrium.

# DOF friction and armature values are very specific parameters that could affect energy efficiency and precision in movements.
dof_friction_range = [0.0, 0.005]  # Small range based on the minor impact it has on performance but still considering efficiency.
dof_armature_range = [0.0, 0.005]  # Minimally varies the joint inertia to see the effects on stability and precision.

# Push velocity in the xy plane simulates external forces or disturbances, e.g., wind or collisions.
push_vel_xy_range = [0.0, 0.5]  # A range to help the robot learn to stabilize against moderate disturbances.

# Gravity variations can simulate different loading conditions or slight inclines/declines the robot might face.
gravity_range = [-0.2, 0.2]  # Small tweaks to represent minor slopes or variations the robot might need to adapt to.

# Note: Each range is chosen with the thought of exposing the robot to a variety of conditions it might face in the real world
# without making the task unnecessarily difficult to learn within our compute budget.
