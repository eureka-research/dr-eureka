# Friction between the robot and the ball is crucial because it affects how well the robot can balance and maneuver on the ball. Since the real ball can be less predictable, a wider range should promote adaptability.
robot_friction_range = [0.1, 1.0] 

# Restitution, or bounciness, will affect how the robot interacts with surfaces upon collision. Though the simulation does not account for ball deformation, varying restitution can simulate the unpredictability of these interactions.
robot_restitution_range = [0.2, 0.8] 

# Since the payload will directly affect the robot's balance and how it responds to shifts in weight, we allow for variability but avoid extreme negative values to maintain realism.
robot_payload_mass_range = [0.0, 3.0]

# Center of mass displacement affects balance and stability. Randomization within a moderate range can prepare the robot for shifts in its own weight distribution.
robot_com_displacement_range = [-0.05, 0.05]

# Motor strength is critical for moving and balancing. A narrow range ensures the robot remains capable of movement but can adapt to variability in its actuation power.
robot_motor_strength_range = [0.95, 1.05] 

# Motor offsets will simulate imperfections in actuator performance. Randomizing this could prepare the robot for real-world inaccuracies.
robot_motor_offset_range = [-0.005, 0.05]

# The ball's mass will significantly impact how the robot interacts with it. Since the ball is hollow and can be deformed, a middle-range should provide a good balance between too light and too heavy.
ball_mass_range = [1.0, 3.0]

# Ball friction and restitution are critical for preparing the robot to interact with a bouncy and deformable ball. These ranges allow for significant variability.
ball_friction_range = [0.5, 2.5]
ball_restitution_range = [0.4, 0.9] 

# Ball drag simulates air resistance, which could affect interactions at higher speeds.
ball_drag_range = [0.1, 0.5]

# The robot might not always operate on similar terrains, so simulating a range of frictions can be beneficial. However, the restitution of the ground is less critical here.
terrain_ground_friction_range = [0.2, 0.8]
terrain_ground_restitution_range = [0.0, 0.5] 

# Terrain roughness could influence balance and traction, so a slight variation can introduce realistic challenges without overwhelming the learning process.
terrain_tile_roughness_range = [0.02, 0.08]

# Varying the push velocities can help the robot learn to maintain balance against unexpected forces.
robot_push_vel_range = [0.1, 0.4]
ball_push_vel_range = [0.1, 0.4]

# Considering the task does not involve drastic changes in gravity, we only slightly vary this to simulate minor differences in weight sensation.
gravity_range = [-0.1, 0.1]